/*************************************************************************
*
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
* 
* Copyright (c) 2010 by the Keeping Found Things Found group, 
*                       the Information School, University of Washington
*
* Planz - Bring it together: Capture, Connect, … Complete!
*
* This file is part of Planz
*
* Planz is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License version 3
* only, as published by the Free Software Foundation.
*
* Planz is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License version 3 for more details
* (a copy is included in the LICENSE file that accompanied this code).
*
* You should have received a copy of the GNU General Public License
* version 3 along with Planz.  If not, see
* <http://www.gnu.org/licenses/gpl.html>
* for a copy of the GPLv3 License.
*
************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Xml;
using IWshRuntimeLibrary;
using Microsoft.VisualBasic.FileIO;

namespace PlanzDBCleaner
{
    class Program
    {
        private const string START_FOLDER = "Projects";
        private const string XOOML_XML_FILENAME = "XooML.xml";
        private const string PLANNER_XML_FILENAME = "planner.xml";
        private const string PLANZ_XML_FILENAME = "planz.xml";
        private const string APPDATA_FOLDERNAME = "Planz";
        private static string START_PATH = System.IO.Path.GetDirectoryName(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)) +
            System.IO.Path.DirectorySeparatorChar + START_FOLDER + System.IO.Path.DirectorySeparatorChar;
  
        static void Main(string[] args)
        {
            Console.WriteLine("This program will clean up Planz generated XML files under folder \"" + START_PATH + "\".");
            Console.WriteLine("The XML files in sub-folders will be recursively moved to Recycle Bin too.");
            Console.WriteLine();
            Console.WriteLine("Warning:");
            Console.WriteLine("You will lose all your notes typed in with Planz, however, your folders and files will NOT be removed.");
            Console.WriteLine();
            Console.WriteLine("Press Y/N to continue...");

            string input = Console.ReadLine();
            if (input == "Y" || input == "y")
            {
                Console.WriteLine();
                Console.WriteLine("Please choose the version of XML file you would like to clean up: ");
                Console.WriteLine("(Type the number and press ENTER key)");
                Console.WriteLine("1: planner.xml, generated by Planner/Planz 7.x");
                Console.WriteLine("2: Planz.xml, generated by Planz BETA");
                Console.WriteLine("3: XooML.xml, generated by Planz (release after 3/15/2010)");

                int type = Int32.Parse(Console.ReadLine());

                string xml_name = String.Empty;
                switch (type)
                {
                    case 1:
                        xml_name = PLANNER_XML_FILENAME;
                        break;
                    case 2:
                        xml_name = PLANZ_XML_FILENAME;
                        break;
                    case 3:
                        xml_name = XOOML_XML_FILENAME;
                        break;
                    default:
                        break;
                };

                if (xml_name != String.Empty)
                {
                    Console.WriteLine();
                    Console.WriteLine("Please wait...");

                    Delete(new DirectoryInfo(START_PATH), xml_name);

                    Console.WriteLine("Done!");
                }
                else
                {
                    Console.WriteLine("You typed the wrong number.");
                }
            }
            else
            {
                
            }

            Console.WriteLine("Press any key to quit the program...");
            Console.ReadLine();
        }

        private static void Delete(DirectoryInfo di, string xmlName)
        {
            string fileFullPath = di.FullName + Path.DirectorySeparatorChar + xmlName;

            if (System.IO.File.Exists(fileFullPath))
            {
                try
                {
                    FileSystem.DeleteFile(fileFullPath, UIOption.OnlyErrorDialogs, RecycleOption.SendToRecycleBin);

                }
                catch (Exception ex)
                {
                    Console.WriteLine("The following file cannot be deleted. ");
                    Console.WriteLine(fileFullPath);
                    Console.WriteLine("Error: " + ex.Message);
                    Console.WriteLine();
                }

                foreach (DirectoryInfo sub_di in di.GetDirectories())
                {
                    Delete(sub_di, xmlName);
                }

                foreach (FileInfo fi in di.GetFiles())
                {
                    if (fi.FullName.EndsWith(".lnk"))
                    {
                        try
                        {
                            WshShellClass wshShell = new WshShellClass();
                            IWshRuntimeLibrary.IWshShortcut shortcut = (IWshRuntimeLibrary.IWshShortcut)wshShell.CreateShortcut(fi.FullName);

                            string folderPath = shortcut.TargetPath;
                            if (Directory.Exists(folderPath))
                            {
                                Delete(new DirectoryInfo(folderPath), xmlName);
                            }
                        }
                        catch (Exception ex)
                        {

                        }
                    }
                }
            }
        }
    }
}
